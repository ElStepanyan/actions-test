name: "Terraform"
concurrency: production
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
  push:
    branches:
      - 'main'
jobs:
  terraform:
    needs: [tfsec, tflint]
    name: "Terraform"
#    env:
#      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        env: [ dev, stage, prod ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        id: plan
        if: github.event_name == 'pull_request'
        run: | 
            ls -l
            terraform plan -no-color -input=false -var-file="application_tfvars/${{ matrix.env }}.tfvars" -out "${{ matrix.env }}.plan"

        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
         # github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -var-file="application_tfvars/${{ matrix.env }}.tfvars"

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    env:
      # custom_checks_dir: '.'
      minimum_severity: MEDIUM
      config_file: ElStepanyan/actions-test/tfsec.yml

    steps:
      - name: Clone repo
        uses: actions/checkout@master

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          #working_directory: terraform/relevant
        #sarif_file: tfsec.sarif
          version: latest
          soft_fail: false
          additional_args: --exclude-downloaded-modules 
                      --config-file ${{ env.config_file }}
                      --minimum-severity ${{ env.minimum_severity }}
  tflint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout source code

      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: ubuntu-tflint-${{ hashFiles('.tflint.hcl') }}

      - uses: terraform-linters/setup-tflint@v1
        name: Setup TFLint
        with:
          tflint_version: v0.35.0
      - uses: terraform-linters/tflint-load-config-action@v0
        with:
          source-repo: ElStepanyan/actions-test
          source-path: tflint-config/.tflint.hcl

      - name: Init TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact